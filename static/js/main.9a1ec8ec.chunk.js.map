{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["StyledContainer","styled","div","props","color","StyledTodo","ItemTodo","motion","li","CloseButton","button","Todo","getStateFromStorage","storedState","localStorage","getItem","setState","JSON","parse","value","todoList","id","text","done","idCount","parseInt","backgroundColor","appTitle","state","saveStateToStorage","console","log","setItem","stringify","showMeState","handleSubmit","e","addItem","preventDefault","substring","command","clearAll","split","reset","clear","handleChange","target","deleteItem","stopPropagation","selectedItem","noItem","filter","i","listClick","newList","map","item","toString","updatedItem","componentDidMount","previousAppState","todolist","this","index","initial","opacity","animate","exit","onClick","style","display","marginTop","className","onSubmit","type","name","onChange","placeholder","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9a1ec8ec.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { FormEvent } from \"react\";\nimport styled from \"styled-components\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\nconst StyledContainer = styled.div`\n  height: 100vh;\n  width: 100vw;\n  background-color: ${(props) => props.color};\n`;\n\nconst StyledTodo = styled.div`\n  font-size: 30px;\n  text-align: center;\n  padding: 60px;\n\n  input {\n    height: 50px;\n    width: 99%;\n    margin-top: 30px;\n    font-size: 30px;\n  }\n\n  ul {\n    list-style: none;\n    width: 100%;\n    margin-block-end: 0em;\n    margin-inline-start: 0px;\n    margin-inline-end: 0px;\n    padding-inline-start: 0px;\n  }\n  h1 {\n    color: white;\n  }\n  @media all and (max-width: 480px) {\n    padding: 20px;\n    ul {\n      margin: 10px;\n      padding: 10px;\n      margin-block-start: 0em;\n      margin-block-end: 0em;\n      margin-inline-start: 0px;\n      margin-inline-end: 0px;\n      padding-inline-start: 0px;\n    }\n    input {\n      width: 90%;\n      padding: 10px;\n    }\n  }\n`;\n\nconst ItemTodo = styled(motion.li)`\n  position: relative;\n  text-align: center;\n  display: flex;\n  background-color: #edddd4;\n  border: 1px solid #351e29;\n  min-height: 80px;\n  width: 100%;\n  justify-content: center;\n  align-items: center;\n  overflow-x: hidden;\n\n  @media all and (max-width: 480px) {\n    width: 100%;\n    padding: 0px;\n    font-size: 25px;\n  }\n`;\n\nconst CloseButton = styled(motion.button)`\n  background-color: #c44536;\n  position: absolute;\n  right: 0px;\n  width: 50px;\n  height: 100%;\n  color: white;\n  border: none;\n  margin-left: 2px;\n`;\n\ninterface Props {}\ninterface todoItem {\n  id: number;\n  text: string;\n  done: boolean;\n}\ninterface State {\n  value: string;\n  todoList: todoItem[];\n  idCount: number;\n  backgroundColor: string;\n  appTitle: string;\n}\nexport default class Todo extends Component<Props, State> {\n  getStateFromStorage = () => {\n    let storedState = localStorage.getItem(\"todoAppState\");\n    if (storedState) {\n      this.setState(JSON.parse(storedState));\n    } else {\n      this.setState({\n        value: \"\",\n        todoList: localStorage.getItem(\"todoList\") //if list exists use it\n          ? JSON.parse(localStorage.getItem(\"todoList\") as string)\n          : // if the user has never added an item to the app, show sample todos\n            [\n              { id: 1, text: \"wash my face\", done: false },\n              { id: 2, text: \"clean my room\", done: false },\n              { id: 3, text: \"check my message\", done: false },\n            ],\n        idCount: localStorage.getItem(\"todoListCount\")\n          ? parseInt(localStorage.getItem(\"todoListCount\") as string)\n          : 3,\n        backgroundColor: \"#283d3b\",\n        appTitle: \"Todo App\",\n      });\n    }\n  };\n  state = {\n    value: \"\",\n    todoList: [],\n    idCount: 0,\n    backgroundColor: \"#283d3b\",\n    appTitle: \"First Load\",\n  };\n\n  saveStateToStorage = () => {\n    console.log(this.state);\n    localStorage.setItem(\"todoAppState\", JSON.stringify(this.state));\n    this.showMeState();\n  };\n  handleSubmit = (e: FormEvent) => {\n    let addItem = () => {\n      this.setState(\n        {\n          value: \"\",\n          todoList: [\n            ...this.state.todoList,\n            { id: this.state.idCount + 1, text: this.state.value, done: false },\n          ],\n          idCount: this.state.idCount + 1,\n        },\n        () => {\n          this.saveStateToStorage();\n        }\n      );\n    };\n\n    e.preventDefault();\n    console.log(this.state);\n    let text = this.state.value;\n    if (text.substring(0, 2) === \"x \" || text.substring(0, 2) === \"X \") {\n      let command = text.substring(2, 7);\n      console.log(`\"${command}\"`);\n      if (command === \"clear\") {\n        //// clears the list, keeps preferences\n        this.clearAll(false);\n      } else if (command === \"color\" || command === \"colou\") {\n        console.log(\"color is\", text.split(\" \")[2]);\n        this.setState(\n          {\n            value: \"\",\n            backgroundColor: text.split(\" \")[2],\n          },\n          () => {\n            this.saveStateToStorage();\n          }\n        );\n      } else if (command === \"title\") {\n        this.setState(\n          {\n            value: \"\",\n            appTitle: text.split(\"title\")[1],\n          },\n          () => {\n            this.saveStateToStorage();\n          }\n        );\n      } else if (command === \"reset\") {\n        // Resets everything\n        this.clearAll(true);\n      } else {\n        addItem();\n      }\n    } else {\n      addItem();\n    }\n  };\n  /** Clears the local storage if true is provided, otherwise simply clears the list\n   * and saves user's preferences such as title and color */\n\n  clearAll = (reset: boolean) => {\n    if (reset) {\n      localStorage.clear();\n      this.setState(\n        {\n          value: \"\",\n          todoList: [],\n          idCount: 0,\n          appTitle: \"Todo App\",\n          backgroundColor: \"#283d3b\",\n        },\n        () => {\n          this.saveStateToStorage();\n        }\n      );\n    } else {\n      this.setState(\n        {\n          value: \"\",\n          todoList: [],\n          idCount: 0,\n        },\n        () => {\n          this.saveStateToStorage();\n        }\n      );\n    }\n  };\n  handleChange = (e: FormEvent) => {\n    this.setState({\n      value: (e.target as HTMLInputElement).value,\n    });\n  };\n  deleteItem = (e: FormEvent) => {\n    console.log(\"deletingitem\");\n\n    e.preventDefault();\n    e.stopPropagation();\n    let selectedItem = (e.target as HTMLSpanElement).id.split(\"-\")[1];\n\n    let noItem = this.state.todoList.filter(\n      (i: { [key: string]: any }) => i.id !== parseInt(selectedItem)\n    );\n    console.log(noItem);\n    this.setState({ todoList: noItem }, () => {\n      this.saveStateToStorage();\n    });\n  };\n  listClick = (e: React.MouseEvent<HTMLLIElement>) => {\n    console.log(\"running listclick\");\n\n    e.preventDefault();\n    console.log(e.target, this.state);\n    let selectedItem = (e.target as HTMLLIElement).id;\n\n    const newList = this.state.todoList.map((item: todoItem) => {\n      if (item.id.toString() === selectedItem) {\n        console.log(item.id, selectedItem);\n        const updatedItem = {\n          ...item,\n          done: !item.done,\n        };\n        console.log(updatedItem);\n        return updatedItem;\n      }\n      console.log(item);\n      return item;\n    });\n    this.setState({ ...this.state, todoList: newList }, () => {\n      this.saveStateToStorage();\n    });\n    /*    var result = this.state.todoList.filter((obj) => {\n      \n      return obj.id === 1;\n    }); */\n  };\n  componentDidMount = () => {\n    //read from storage to see if a previous configuration / state exists\n    this.showMeState();\n    let previousAppState = localStorage.getItem(\"todoAppState\");\n\n    if (previousAppState) {\n      this.setState(JSON.parse(previousAppState));\n    }\n  };\n\n  showMeState = () => {\n    console.log(localStorage.getItem(\"todoAppState\"));\n  };\n  render() {\n    let todolist;\n    if (this.state.todoList) {\n      todolist = this.state.todoList.map(\n        (i: { [key: string]: any }, index: number) => {\n          if (i.done) {\n            return (\n              <ItemTodo\n                initial={{ opacity: 1 }}\n                animate={{ opacity: 0.1 }}\n                exit={{ opacity: 0 }}\n                key={index}\n                onClick={this.listClick}\n                id={i.id.toString()}\n                style={{ display: \"flex\", marginTop: 5 }}\n              >\n                {i.text}\n                <CloseButton\n                  key={index + \"-button\"}\n                  onClick={this.deleteItem}\n                  id={\"button-\" + i.id.toString()}\n                >\n                  {\" \"}\n                  &times;{\" \"}\n                </CloseButton>\n              </ItemTodo>\n            );\n          } else {\n            return (\n              <ItemTodo\n                initial={{ opacity: 0.1 }}\n                animate={{ opacity: 1 }}\n                exit={{ opacity: 0 }}\n                key={index}\n                onClick={this.listClick}\n                id={i.id.toString()}\n                style={{ display: \"flex\", marginTop: 5 }}\n              >\n                {i.text}\n                <CloseButton\n                  key={index + \"button\"}\n                  id={\"button-\" + i.id.toString()}\n                  onClick={this.deleteItem}\n                >\n                  {\" \"}\n                  &times;{\" \"}\n                </CloseButton>\n              </ItemTodo>\n            );\n          }\n        }\n      );\n    } else {\n      todolist = null;\n    }\n\n    return (\n      <StyledContainer color={this.state.backgroundColor}>\n        <StyledTodo>\n          <div className=\"container\">\n            <h1>{this.state.appTitle}</h1>\n            <form onSubmit={this.handleSubmit}>\n              <input\n                onSubmit={this.handleSubmit}\n                type=\"text\"\n                name=\"text-box\"\n                id=\"text-box\"\n                value={this.state.value}\n                onChange={this.handleChange}\n                placeholder=\"&#x270F;\"\n              />\n            </form>\n            <ul>\n              {\" \"}\n              <AnimatePresence>{todolist}</AnimatePresence>\n            </ul>\n          </div>\n        </StyledTodo>\n      </StyledContainer>\n    );\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./index.css\"\nimport Todo from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Todo />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}