{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["StyledContainer","styled","div","props","color","StyledHeading","h1","StyledTodo","ItemTodo","motion","li","CloseButton","button","Todo","state","value","todoList","idCount","backgroundColor","appTitle","appTitleColor","itemColor","itemFontColor","itemCloseColor","saveStateToStorage","document","title","faviconChanger","console","log","localStorage","setItem","JSON","stringify","showMeState","handleSubmit","e","addItem","setState","id","text","done","preventDefault","substring","command","clearAll","split","search","length","colors","reset","clear","handleChange","target","deleteItem","stopPropagation","selectedItem","noItem","filter","i","parseInt","listClick","newList","map","item","toString","updatedItem","componentDidMount","previousAppState","getItem","parse","favicon","getElementById","faviconSize","canvas","createElement","width","height","context","getContext","img","src","href","onload","drawImage","txt","fillStyle","fillRect","font","textBaseline","textAlign","fillText","toDataURL","todolist","this","index","initial","opacity","animate","exit","onClick","className","onSubmit","type","name","onChange","placeholder","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d9cb2d6a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { FormEvent } from \"react\";\nimport styled from \"styled-components\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\nconst StyledContainer = styled.div`\n  min-height: 100vh;\n  max-width: 100vw;\n  background-color: ${(props) => props.color};\n`;\nconst StyledHeading = styled.h1`\n  color: ${(props) => props.color};\n`;\n\nconst StyledTodo = styled.div`\n  font-size: 30px;\n  text-align: center;\n  padding: 60px;\n  max-width: 100%;\n  color: ${(props) => props.color};\n  input {\n    height: 50px;\n    width: 99%;\n    margin-top: 30px;\n    font-size: 30px;\n  }\n\n  ul {\n    list-style: none;\n    width: 100%;\n    margin-block-end: 0em;\n    margin-inline-start: 0px;\n    margin-inline-end: 0px;\n    padding-inline-start: 0px;\n  }\n\n  @media all and (max-width: 480px) {\n    padding: 20px;\n    ul {\n      margin: 10px;\n      padding: 10px;\n      margin-block-start: 0em;\n      margin-block-end: 0em;\n      margin-inline-start: 0px;\n      margin-inline-end: 0px;\n      padding-inline-start: 0px;\n    }\n    input {\n      width: 90%;\n      padding: 10px;\n    }\n  }\n`;\n\nconst ItemTodo = styled(motion.li)`\n  position: relative;\n  text-align: center;\n  display: flex;\n  background-color: ${(props) => props.color};\n  border: 1px solid #351e29;\n  min-height: 80px;\n  width: 100%;\n  justify-content: center;\n  align-items: center;\n  overflow-x: hidden;\n  padding: 5px 0 5px 0;\n  display: flex;\n  margin-top: 5px;\n\n  @media all and (max-width: 480px) {\n    width: 100%;\n    padding: 0px;\n    font-size: 25px;\n  }\n`;\n\nconst CloseButton = styled(motion.button)`\n  background-color: ${(props) => props.color};\n  position: absolute;\n  right: 0px;\n  width: 50px;\n  height: 100%;\n  color: white;\n  border: none;\n  margin-left: 2px;\n`;\n\ninterface Props {}\ninterface todoItem {\n  id: number;\n  text: string;\n  done: boolean;\n}\ninterface State {\n  value: string;\n  todoList: todoItem[];\n  idCount: number;\n  backgroundColor: string;\n  appTitle: string;\n  appTitleColor: string;\n  itemColor: string;\n  itemFontColor: string;\n  itemCloseColor: string;\n}\nexport default class Todo extends Component<Props, State> {\n  state = {\n    value: \"\",\n    todoList: [],\n    idCount: 0,\n    backgroundColor: \"#283d3b\",\n    appTitle: \"Todo List\",\n    appTitleColor: \"white\",\n    itemColor: \"#edddd4\",\n    itemFontColor: \"black\",\n    itemCloseColor: \"#c44536\",\n  };\n\n  saveStateToStorage = () => {\n    document.title = this.state.appTitle;\n    this.faviconChanger();\n    console.log(this.state);\n    localStorage.setItem(\"todoAppState\", JSON.stringify(this.state));\n    this.showMeState();\n  };\n  handleSubmit = (e: FormEvent) => {\n    let addItem = () => {\n      this.setState(\n        {\n          value: \"\",\n          todoList: [\n            ...this.state.todoList,\n            { id: this.state.idCount + 1, text: this.state.value, done: false },\n          ],\n          idCount: this.state.idCount + 1,\n        },\n        () => {\n          this.saveStateToStorage();\n        }\n      );\n    };\n\n    e.preventDefault();\n    console.log(this.state);\n    let text = this.state.value;\n    if (text.substring(0, 2) === \"x \" || text.substring(0, 2) === \"X \") {\n      let command = text.substring(2, 7);\n      console.log(`\"${command}\"`);\n      if (command === \"clear\") {\n        //// clears the list, keeps preferences\n        this.clearAll(false);\n      } else if (command === \"color\" || command === \"colou\") {\n        console.log(\"color is\", text.split(\" \")[2]);\n\n        this.setState(\n          {\n            value: \"\",\n            backgroundColor: text.split(\" \")[2],\n          },\n          () => {\n            this.saveStateToStorage();\n          }\n        );\n      } else if (command === \"title\") {\n        if (text.search(/colou?r/) >= 0) {\n          let color = text.split(\" \");\n          this.setState(\n            {\n              value: \"\",\n              appTitleColor: color[color.length - 1],\n            },\n            () => {\n              this.saveStateToStorage();\n            }\n          );\n        } else {\n          this.setState(\n            {\n              value: \"\",\n              appTitle: text.split(\"title \")[1],\n            },\n            () => {\n              this.saveStateToStorage();\n            }\n          );\n        }\n      } else if (command === \"reset\") {\n        // Resets everything\n        this.clearAll(true);\n      } else if (command === \"item \") {\n        if (text.search(/colou?rs?/) >= 0) {\n          let colors = text.split(\" \");\n          console.log(colors);\n          if (colors.length === 4) {\n            this.setState(\n              {\n                value: \"\",\n                itemColor: colors[3],\n              },\n              () => {\n                this.saveStateToStorage();\n              }\n            );\n          } else if (colors.length === 5) {\n            this.setState(\n              {\n                value: \"\",\n                itemColor: colors[3],\n                itemFontColor: colors[4],\n              },\n              () => {\n                this.saveStateToStorage();\n              }\n            );\n          } else if (colors.length === 6) {\n            this.setState(\n              {\n                value: \"\",\n                itemColor: colors[3],\n                itemFontColor: colors[4],\n                itemCloseColor: colors[5],\n              },\n              () => {\n                this.saveStateToStorage();\n              }\n            );\n          }\n        }\n      } else {\n        addItem();\n      }\n    } else {\n      addItem();\n    }\n  };\n  /** Clears the local storage if true is provided, otherwise simply clears the list\n   * and saves user's preferences such as title and color */\n\n  clearAll = (reset: boolean) => {\n    if (reset) {\n      localStorage.clear();\n      this.setState(\n        {\n          value: \"\",\n          todoList: [],\n          idCount: 0,\n          appTitle: \"Todo App\",\n          backgroundColor: \"#283d3b\",\n          appTitleColor: \"white\",\n          itemColor: \"#edddd4\",\n          itemFontColor: \"black\",\n          itemCloseColor: \"#c44536\",\n        },\n        () => {\n          this.saveStateToStorage();\n        }\n      );\n    } else {\n      this.setState(\n        {\n          value: \"\",\n          todoList: [],\n          idCount: 0,\n        },\n        () => {\n          this.saveStateToStorage();\n        }\n      );\n    }\n  };\n  handleChange = (e: FormEvent) => {\n    this.setState({\n      value: (e.target as HTMLInputElement).value,\n    });\n  };\n  deleteItem = (e: FormEvent) => {\n    console.log(\"deletingitem\");\n\n    e.preventDefault();\n    e.stopPropagation();\n    let selectedItem = (e.target as HTMLSpanElement).id.split(\"-\")[1];\n\n    let noItem = this.state.todoList.filter(\n      (i: { [key: string]: any }) => i.id !== parseInt(selectedItem)\n    );\n    console.log(noItem);\n    this.setState({ todoList: noItem }, () => {\n      this.saveStateToStorage();\n    });\n  };\n  listClick = (e: React.MouseEvent<HTMLLIElement>) => {\n    console.log(\"running listclick\");\n\n    e.preventDefault();\n    console.log(e.target, this.state);\n    let selectedItem = (e.target as HTMLLIElement).id;\n\n    const newList = this.state.todoList.map((item: todoItem) => {\n      if (item.id.toString() === selectedItem) {\n        console.log(item.id, selectedItem);\n        const updatedItem = {\n          ...item,\n          done: !item.done,\n        };\n        console.log(updatedItem);\n        return updatedItem;\n      }\n      console.log(item);\n      return item;\n    });\n    this.setState({ ...this.state, todoList: newList }, () => {\n      this.saveStateToStorage();\n    });\n    /*    var result = this.state.todoList.filter((obj) => {\n      \n      return obj.id === 1;\n    }); */\n  };\n  componentDidMount = () => {\n    //read from storage to see if a previous configuration / state exists\n    this.showMeState();\n    let previousAppState = localStorage.getItem(\"todoAppState\");\n\n    if (previousAppState) {\n      this.setState(JSON.parse(previousAppState));\n    } else {\n      this.setState({\n        todoList: [\n          { id: 0, text: \"Touch this item to disable it\", done: false },\n          {\n            id: 1,\n            text: \"type 'x color gold' to change background color\",\n            done: false,\n          },\n          {\n            id: 2,\n            text: \"type 'x title 💰💰` to set cutom title\",\n            done: false,\n          },\n          { id: 3, text: \"type 'x clear` to clear the list\", done: false },\n          {\n            id: 4,\n            text: \"type 'x reset' to reset app to default state\",\n            done: false,\n          },\n        ],\n        idCount: 4,\n      });\n    }\n  };\n\n  showMeState = () => {\n    console.log(localStorage.getItem(\"todoAppState\"));\n  };\n  faviconChanger = () => {\n    console.log(this.state.appTitle, this.state.appTitleColor);\n    var favicon = document.getElementById(\"favicon\");\n    var faviconSize = 192;\n\n    var canvas = document.createElement(\"canvas\");\n    canvas.width = faviconSize;\n    canvas.height = faviconSize;\n\n    var context = canvas.getContext(\"2d\");\n    var img = document.createElement(\"img\");\n\n    if (favicon) {\n      img.src = (favicon as HTMLLinkElement).href;\n\n      img.onload = () => {\n        // Draw Original Favicon as Background\n        if (context) {\n          context.drawImage(img, 0, 0, faviconSize, faviconSize);\n          let txt = this.state.appTitle[0] || \"✍\";\n          console.log(this.state.appTitle[0], \"is txt\");\n          //set background of favicon from the app bakground\n          context.fillStyle = this.state.backgroundColor;\n          context.fillRect(0, 0, 192, 192);\n          //first char from your title\n          context.font = \"148px serif\";\n          context.fillStyle = this.state.appTitleColor;\n          context.textBaseline = \"middle\";\n          context.textAlign = \"center\";\n          context.fillText(txt, faviconSize / 2, faviconSize / 2);\n          // Replace favicon\n          (favicon as HTMLLinkElement).href = canvas.toDataURL(\"image/png\");\n          let homeScreen = document.getElementById(\"home-screen\");\n          (homeScreen as HTMLLinkElement).href = canvas.toDataURL(\"image/png\");\n        }\n      };\n    }\n  };\n  render() {\n    let todolist;\n    if (this.state.todoList) {\n      todolist = this.state.todoList.map(\n        (i: { [key: string]: any }, index: number) => {\n          if (i.done) {\n            return (\n              <ItemTodo\n                color={this.state.itemColor}\n                initial={{ opacity: 1 }}\n                animate={{ opacity: 0.1 }}\n                exit={{ opacity: 0 }}\n                key={index}\n                onClick={this.listClick}\n                id={i.id.toString()}\n              >\n                {i.text}\n                <CloseButton\n                  color={this.state.itemCloseColor}\n                  key={index + \"-button\"}\n                  onClick={this.deleteItem}\n                  id={\"button-\" + i.id.toString()}\n                >\n                  {\" \"}\n                  &times;{\" \"}\n                </CloseButton>\n              </ItemTodo>\n            );\n          } else {\n            return (\n              <ItemTodo\n                color={this.state.itemColor}\n                initial={{ opacity: 0.1 }}\n                animate={{ opacity: 1 }}\n                exit={{ opacity: 0 }}\n                key={index}\n                onClick={this.listClick}\n                id={i.id.toString()}\n              >\n                {i.text}\n                <CloseButton\n                  color={this.state.itemCloseColor}\n                  key={index + \"button\"}\n                  id={\"button-\" + i.id.toString()}\n                  onClick={this.deleteItem}\n                >\n                  {\" \"}\n                  &times;{\" \"}\n                </CloseButton>\n              </ItemTodo>\n            );\n          }\n        }\n      );\n    } else {\n      todolist = null;\n    }\n\n    return (\n      <StyledContainer color={this.state.backgroundColor}>\n        <StyledTodo color={this.state.itemFontColor}>\n          <div className=\"container\">\n            <StyledHeading color={this.state.appTitleColor}>\n              {this.state.appTitle}\n            </StyledHeading>\n            <form onSubmit={this.handleSubmit}>\n              <input\n                onSubmit={this.handleSubmit}\n                type=\"text\"\n                name=\"text-box\"\n                id=\"text-box\"\n                value={this.state.value}\n                onChange={this.handleChange}\n                placeholder=\"&#x270F;\"\n              />\n            </form>\n            <ul>\n              {\" \"}\n              <AnimatePresence>{todolist}</AnimatePresence>\n            </ul>\n          </div>\n        </StyledTodo>\n      </StyledContainer>\n    );\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Todo from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Todo />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}